{"name": "test_click_by_image", "status": "failed", "statusDetails": {"message": "Failed: Ошибка при клике по изображению:", "trace": "args = ('image/image.png',), kwargs = {'confidence': 0.8}\n\n    @functools.wraps(wrappedFunction)\n    def wrapper(*args, **kwargs):\n        try:\n>           return wrappedFunction(*args, **kwargs)\n\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.11/site-packages/pyautogui/__init__.py:172: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/homebrew/Caskroom/miniconda/base/lib/python3.11/site-packages/pyautogui/__init__.py:204: in locateCenterOnScreen\n    return pyscreeze.locateCenterOnScreen(*args, **kwargs)\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.11/site-packages/pyscreeze/__init__.py:447: in locateCenterOnScreen\n    coords = locateOnScreen(image, **kwargs)\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.11/site-packages/pyscreeze/__init__.py:405: in locateOnScreen\n    retVal = locate(image, screenshotIm, **kwargs)\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.11/site-packages/pyscreeze/__init__.py:383: in locate\n    points = tuple(locateAll(needleImage, haystackImage, **kwargs))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nneedleImage = array([[24, 24, 24, ..., 24, 24, 24],\n       [24, 24, 24, ..., 24, 24, 24],\n       [24, 24, 24, ..., 24, 24, 24],\n    ...24, 24, 24, ..., 24, 24, 24],\n       [24, 24, 24, ..., 24, 24, 24],\n       [24, 24, 24, ..., 24, 24, 24]], dtype=uint8)\nhaystackImage = array([[43, 42, 42, ..., 50, 50, 50],\n       [42, 42, 42, ..., 51, 51, 51],\n       [42, 42, 43, ..., 50, 50, 50],\n    ...20, 17, 22, ..., 10, 14, 10],\n       [23, 19, 24, ..., 10, 16, 12],\n       [18, 22, 18, ..., 14, 10, 15]], dtype=uint8)\ngrayscale = True, limit = 1, region = (0, 0), step = 1, confidence = 0.8\n\n    def _locateAll_opencv(needleImage, haystackImage, grayscale=None, limit=10000, region=None, step=1, confidence=0.999):\n        \"\"\"\n        TODO - rewrite this\n            faster but more memory-intensive than pure python\n            step 2 skips every other row and column = ~3x faster but prone to miss;\n                to compensate, the algorithm automatically reduces the confidence\n                threshold by 5% (which helps but will not avoid all misses).\n            limitations:\n              - OpenCV 3.x & python 3.x not tested\n              - RGBA images are treated as RBG (ignores alpha channel)\n        \"\"\"\n        if grayscale is None:\n            grayscale = GRAYSCALE_DEFAULT\n    \n        confidence = float(confidence)\n    \n        needleImage = _load_cv2(needleImage, grayscale)\n        needleHeight, needleWidth = needleImage.shape[:2]\n        haystackImage = _load_cv2(haystackImage, grayscale)\n    \n        if region:\n            haystackImage = haystackImage[region[1] : region[1] + region[3], region[0] : region[0] + region[2]]\n        else:\n            region = (0, 0)  # full image; these values used in the yield statement\n        if haystackImage.shape[0] < needleImage.shape[0] or haystackImage.shape[1] < needleImage.shape[1]:\n            # avoid semi-cryptic OpenCV error below if bad size\n            raise ValueError('needle dimension(s) exceed the haystack image or region dimensions')\n    \n        if step == 2:\n            confidence *= 0.95\n            needleImage = needleImage[::step, ::step]\n            haystackImage = haystackImage[::step, ::step]\n        else:\n            step = 1\n    \n        # get all matches at once, credit: https://stackoverflow.com/questions/7670112/finding-a-subimage-inside-a-numpy-image/9253805#9253805\n        result = cv2.matchTemplate(haystackImage, needleImage, cv2.TM_CCOEFF_NORMED)\n        match_indices = numpy.arange(result.size)[(result > confidence).flatten()]\n        matches = numpy.unravel_index(match_indices[:limit], result.shape)\n    \n        if len(matches[0]) == 0:\n            if USE_IMAGE_NOT_FOUND_EXCEPTION:\n>               raise ImageNotFoundException('Could not locate the image (highest confidence = %.3f)' % result.max())\nE               pyscreeze.ImageNotFoundException: Could not locate the image (highest confidence = 0.459)\n\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.11/site-packages/pyscreeze/__init__.py:257: ImageNotFoundException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_click_by_image():\n        \"\"\"Тестирование клика по изображению.\"\"\"\n        try:\n>           result = ui_automator.click(image=\"image/image.png\", timeout=5)\n\ntests/test_ui_automator.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nui/base_ui.py:33: in click\n    pos = pyautogui.locateCenterOnScreen(image, confidence=0.8)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = ('image/image.png',), kwargs = {'confidence': 0.8}\n\n    @functools.wraps(wrappedFunction)\n    def wrapper(*args, **kwargs):\n        try:\n            return wrappedFunction(*args, **kwargs)\n        except pyscreeze.ImageNotFoundException:\n>           raise ImageNotFoundException  # Raise PyAutoGUI's ImageNotFoundException.\nE           pyautogui.ImageNotFoundException\n\n/opt/homebrew/Caskroom/miniconda/base/lib/python3.11/site-packages/pyautogui/__init__.py:174: ImageNotFoundException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_click_by_image():\n        \"\"\"Тестирование клика по изображению.\"\"\"\n        try:\n            result = ui_automator.click(image=\"image/image.png\", timeout=5)\n            assert result is None or result == True  # Переход по изображению\n        except Exception as e:\n>           pytest.fail(f\"Ошибка при клике по изображению: {e}\")\nE           Failed: Ошибка при клике по изображению:\n\ntests/test_ui_automator.py:23: Failed"}, "description": "Тестирование клика по изображению.", "start": 1745259366129, "stop": 1745259366609, "uuid": "3fccd292-bdfe-4889-bf41-791424f7c60a", "historyId": "a158ff86b8f0f8189d210a98ca3f7838", "testCaseId": "a158ff86b8f0f8189d210a98ca3f7838", "fullName": "tests.test_ui_automator#test_click_by_image", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_ui_automator"}, {"name": "host", "value": "MacBook-Air-Polina.local"}, {"name": "thread", "value": "39736-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_ui_automator"}]}